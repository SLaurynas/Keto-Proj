# Keto Project

![Keto Project Screenshot](./08339965-5620-4b9e-a3f8-db58a39ce248.jpg)

## Project Overview
This is a web application focused on ketogenic diet management and product tracking. The project uses a PostgreSQL database for data storage and features a Node.js backend with a modern frontend interface.

## Technical Stack
- **Backend**: Node.js with Express
- **Database**: PostgreSQL
- **Frontend**: [Your frontend framework]
- **API**: RESTful architecture

## How It Works
1. **Database Connection**: The application connects to a PostgreSQL database using environment variables for secure configuration
2. **Product Management**: Users can view and manage keto-friendly products
3. **API Endpoints**: RESTful API endpoints handle data operations
4. **User Interface**: [Describe your main UI features]

## Getting Started
1. Clone the repository
2. Install dependencies: `npm install`
3. Set up your `.env` file with database credentials
4. Run the server: `npm start`


# 1. Initial setup
mkdir server
cd server
npm init -y
npm install express pg dotenv uuid cors nodemon --save-dev

# 2. Database setup (in PostgreSQL)

CREATE DATABASE products_db;

CREATE TABLE original_products (
    id UUID PRIMARY KEY,
    product_code VARCHAR(255) UNIQUE NOT NULL,
    price DECIMAL(10,2) NOT NULL
);

CREATE TABLE modified_products (
    id UUID PRIMARY KEY,
    product_code VARCHAR(255) UNIQUE NOT NULL,
    price DECIMAL(10,2) NOT NULL
);

# 3. Start the server
npm run dev

# 4. In a new terminal - Test endpoints
# Populate original products
Invoke-RestMethod -Method POST -Uri "http://localhost:5000/api/populate-products"

# Sync to modified products with VAT (minimum price 50)
Invoke-RestMethod -Method POST -Uri "http://localhost:5000/api/sync-products" -ContentType "application/json" -Body '{"minPrice": 50}'

# Get products
Invoke-RestMethod -Method GET -Uri "http://localhost:5000/api/original-products"
Invoke-RestMethod -Method GET -Uri "http://localhost:5000/api/modified-products"
